name: Rust

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  SHELL: /bin/bash

jobs:
  Build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v2
      - name: Query version number
        id: version
        shell: bash
        run: |
          echo "using commit ${GITHUB_SHA:0:7}"
          echo ::set-output name=version::"${GITHUB_SHA:0:7}"

      - name: ccache cache files
        if: startsWith(matrix.os, 'windows') != true
        uses: actions/cache@v1.1.0
        with:
          path: .ccache
          key: ${{ runner.os }}

      - name: Install dependencies on OS X
        if: startsWith(matrix.os, 'macOS')
        run: |
          brew install python autoconf@2.13 ccache llvm yasm p7zip
      - name: Install dependencies on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt install autoconf2.13 clang ccache llvm p7zip -y
      - name: Install dependencies on windows
        if: startsWith(matrix.os, 'windows')
        run: |
          Start-BitsTransfer -Source https://ftp.mozilla.org/pub/mozilla/libraries/win32/MozillaBuildSetup-Latest.exe -Destination ./MozillaBuildSetup.exe
          .\MozillaBuildSetup.exe /S | Out-Null
          iwr -useb get.scoop.sh | iex
          scoop install llvm --global
          echo "C:\ProgramData\scoop\shims;C:\Users\runneradmin\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
          default: true

      - name: POSIX
        if: startsWith(matrix.os, 'windows') != true
        env:
          CC: "clang"
          CXX: "clang++"
        run: |
          ccache cargo build --target ${{ matrix.target }}
          ccache cargo test
          mkdir dist
          mv ./target/${{ matrix.target }}/debug/cli ./dist/spiderfire
          7z a -ttar -so -an ./dist | 7z a -si ./spiderfire-${{ steps.version.outputs.VERSION }}-${{ matrix.target }}.tar.gz
      - name: Windows
        if: startsWith(matrix.os, 'windows')
        shell: cmd
        env:
          MOZTOOLS_PATH: 'C:\mozilla-build\msys\bin;C:\mozilla-build\bin'
          AUTOCONF: "C:/mozilla-build/msys/local/bin/autoconf-2.13"
          LINKER: "lld-link.exe"
          CC: "clang-cl.exe"
          CXX: "clang-cl.exe"
          NATIVE_WIN32_PYTHON: "C:\\mozilla-build\\python\\python.exe"
          PYTHON3: "C:\\mozilla-build\\python3\\python3.exe"
          LIBCLANG_PATH: "C:\\ProgramData\\scoop\\apps\\llvm\\current\\lib"
          CARGO_HOME: ${{ github.workspace }}\..\.cargo
        run: |
          cargo build --target ${{ matrix.target }}
          cargo test
          mkdir dist
          move ./target/${{ matrix.target }}/debug/cli.exe ./dist/spiderfire.exe
          7z a -ttar -so -an ./dist | 7z a -si ./spiderfire-${{ steps.version.outputs.VERSION }}-${{ matrix.target }}.tar.gz

      - name: Upload Zip
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.target }}
          path: ./spiderfire-${{ steps.version.outputs.VERSION }}-${{ matrix.target }}

  release:
    name: GitHub Release
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Query version number
        id: version
        shell: bash
        run: |
          echo "using commit ${GITHUB_SHA:0:7}"
          echo ::set-output name=version::"${GITHUB_SHA:0:7}"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: ${{ steps.version.outputs.VERSION }}

      - name: Download tarball
        uses: actions/download-artifact@v1
        with:
          name: x86_64-apple-darwin

      - name: Download tarball
        uses: actions/download-artifact@v1
        with:
          name: x86_64-unknown-linux-gnu

      - name: Download tarball
        uses: actions/download-artifact@v1
        with:
          name: x86_64-pc-windows-msvc

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ./x86_64-apple-darwin/spiderfire-${{ steps.version.outputs.VERSION }}-x86_64-apple-darwin.tar.gz
            ./x86_64-unknown-linux-gnu/spiderfire-${{ steps.version.outputs.VERSION }}-x86_64-unknown-linux-gnu.tar.gz
            ./x86_64-pc-windows-msvc/spiderfire-${{ steps.version.outputs.VERSION }}-x86_64-pc-windows-msvc.tar.gz
